// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_value.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from test_value.proto</summary>
public static partial class TestValueReflection {

  #region Descriptor
  /// <summary>File descriptor for test_value.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TestValueReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChB0ZXN0X3ZhbHVlLnByb3RvIiMKCVRlc3RWYWx1ZRIKCgJ2MRgBIAEoDRIK",
          "CgJ2MhgCIAEoDSIuCgxUZXN0VmFsdWVBbGwSHgoKdGVzdFZhbHVlcxgBIAMo",
          "CzIKLlRlc3RWYWx1ZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TestValue), global::TestValue.Parser, new[]{ "V1", "V2" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TestValueAll), global::TestValueAll.Parser, new[]{ "TestValues" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class TestValue : pb::IMessage<TestValue> {
  private static readonly pb::MessageParser<TestValue> _parser = new pb::MessageParser<TestValue>(() => new TestValue());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TestValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TestValueReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestValue(TestValue other) : this() {
    v1_ = other.v1_;
    v2_ = other.v2_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestValue Clone() {
    return new TestValue(this);
  }

  /// <summary>Field number for the "v1" field.</summary>
  public const int V1FieldNumber = 1;
  private uint v1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint V1 {
    get { return v1_; }
    set {
      v1_ = value;
    }
  }

  /// <summary>Field number for the "v2" field.</summary>
  public const int V2FieldNumber = 2;
  private uint v2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint V2 {
    get { return v2_; }
    set {
      v2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TestValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TestValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (V1 != other.V1) return false;
    if (V2 != other.V2) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (V1 != 0) hash ^= V1.GetHashCode();
    if (V2 != 0) hash ^= V2.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (V1 != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(V1);
    }
    if (V2 != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(V2);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (V1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(V1);
    }
    if (V2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(V2);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TestValue other) {
    if (other == null) {
      return;
    }
    if (other.V1 != 0) {
      V1 = other.V1;
    }
    if (other.V2 != 0) {
      V2 = other.V2;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          V1 = input.ReadUInt32();
          break;
        }
        case 16: {
          V2 = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TestValueAll : pb::IMessage<TestValueAll> {
  private static readonly pb::MessageParser<TestValueAll> _parser = new pb::MessageParser<TestValueAll>(() => new TestValueAll());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TestValueAll> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TestValueReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestValueAll() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestValueAll(TestValueAll other) : this() {
    testValues_ = other.testValues_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestValueAll Clone() {
    return new TestValueAll(this);
  }

  /// <summary>Field number for the "testValues" field.</summary>
  public const int TestValuesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TestValue> _repeated_testValues_codec
      = pb::FieldCodec.ForMessage(10, global::TestValue.Parser);
  private readonly pbc::RepeatedField<global::TestValue> testValues_ = new pbc::RepeatedField<global::TestValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TestValue> TestValues {
    get { return testValues_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TestValueAll);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TestValueAll other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!testValues_.Equals(other.testValues_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= testValues_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    testValues_.WriteTo(output, _repeated_testValues_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += testValues_.CalculateSize(_repeated_testValues_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TestValueAll other) {
    if (other == null) {
      return;
    }
    testValues_.Add(other.testValues_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          testValues_.AddEntriesFrom(input, _repeated_testValues_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
